// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  role         String        // Role of the user (e.g.,"superadmin" "admin", "agency")
  location     String?       // Location of the agency (e.g., "Maubeuge")
  transactions Transaction[] // Relation to transactions
  agencyId     Int?          // Foreign key to Agency
  agency       Agency?       @relation(fields: [agencyId], references: [id])
}

model Agency {
  id           Int           @id @default(autoincrement())
  name         String
  location     String
  users        User[]        // Relation to users
  transactions Transaction[] // Relation to transactions
}

model Transaction {
  id                Int       @id @default(autoincrement())
  date              DateTime
  clientName        String
  factureNumber     String    @default("N/A")
  clientMail        String?   
  phone             String?   
  adresse           String
  codePostal        String
  ville             String
  orderNumber       String
  designation       String?   
  weight            Float     
  amount            Float     
  paiement          String    @default("non spécifié")
  location          String?   
  jewelryPhotoUrl   String?   // GARDER pour compatibilité
  paymentProofUrl   String?   
  fraudChecked      Boolean   @default(false)  
  isFraud           Boolean   @default(false)  
  userId            Int?      // Foreign key to User Optionnel
  user              User?     @relation(fields: [userId], references: [id]) // Relation à User
  agencyId          Int?      
  agency            Agency?   @relation(fields: [agencyId], references: [id])
  items             TransactionItem[] 
  jewelryPhotos     JewelryPhoto[]    // NOUVEAU: Relation aux photos multiples
  factureGoogleDriveUrl      String?
  retractationGoogleDriveUrl String?
}

model TransactionItem {
  id            Int         @id @default(autoincrement())
  designation   String
  carats        String
  weight        Float
  unitPrice     Float
  subtotal      Float
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}
model JewelryPhoto {
  id            Int         @id @default(autoincrement())
  photoUrl      String      // URL de la photo dans Google Drive
  photoOrder    Int         @default(1) // Ordre d'affichage
  description   String?     // Description optionnelle de la photo
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  
  @@index([transactionId]) // Index pour optimiser les requêtes
}